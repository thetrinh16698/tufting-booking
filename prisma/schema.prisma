// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  subscriptions Subscription[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Service Categories
model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  services Service[]
}

// Services
model Service {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  shortDescription String?
  image       String?
  price       Decimal
  duration    Int       // Duration in minutes
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  bookings    Booking[]
  availability Availability[]
}

// Availability Slots
model Availability {
  id        String   @id @default(cuid())
  serviceId String
  date      DateTime
  startTime String   // Format: "09:00"
  endTime   String   // Format: "10:00"
  isBooked  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  service Service @relation(fields: [serviceId], references: [id])
  booking Booking?
}

// Bookings
model Booking {
  id          String      @id @default(cuid())
  userId      String
  serviceId   String
  availabilityId String?  @unique
  status      BookingStatus @default(PENDING)
  notes       String?
  totalPrice  Decimal
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id])
  service     Service     @relation(fields: [serviceId], references: [id])
  availability Availability? @relation(fields: [availabilityId], references: [id])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

// Pricing Plans
model Plan {
  id          String    @id @default(cuid())
  name        String
  description String?
  price       Decimal
  interval    String    // "month", "year", etc.
  stripePriceId String? @unique
  isActive    Boolean   @default(true)
  features    String    // JSON string of feature descriptions
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  subscriptions Subscription[]
}

// User Subscriptions
model Subscription {
  id            String   @id @default(cuid())
  userId        String
  planId        String
  stripeSubscriptionId String? @unique
  status        SubscriptionStatus @default(ACTIVE)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])
  plan Plan @relation(fields: [planId], references: [id])
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
}
